@page "/fhir"
@using DataLayer
@using Hl7.Fhir.Model
@using FHIR.Client
@using FHIR.Extensions
@using Hl7.Fhir.Serialization
@using Microsoft.EntityFrameworkCore
@using Task = System.Threading.Tasks.Task

@inject FhirClientFactory FhirClientFactory
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

<h1>Fhir</h1>
This pages is for debugging and verification that the data are indeed synced to FHIR.
Due to storage limitations and for the sake of demo, only last 7 days are synced.

<h2>Patients in FHIR</h2>
<MudDataGrid Items="@_patients">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Email" Title="Email" />
        <PropertyColumn Property="x => x.ObservationCount" Title="Observations" />
        <PropertyColumn Property="x => x.MedicationAdministrationCount" Title="Medication Administrations" />
        <PropertyColumn Property="x => x.Json" Title="Json" />
    </Columns>
</MudDataGrid>

@code {
    private readonly List<PatientRow> _patients = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await ContextFactory.CreateDbContextAsync();
        var fhirIds = await context.Users.Select(x => x.FhirId).Where(x => !string.IsNullOrEmpty(x)).ToHashSetAsync();
        var fhir = FhirClientFactory.Client;
        
        foreach (var fhirId in fhirIds)
        {
            var patient = await fhir.ReadAsync<Patient>($"Patient/{fhirId}");
            
            if (patient is null)
            {
                continue;
            }
            
            _patients.Add(new PatientRow
            {
                Id = patient.Id,
                Name = patient.Name.ToFullName(),
                Email = patient.GetEmail(),
                ObservationCount = (await fhir.SearchAsync<Observation>([$"subject=Patient/{patient.Id}", "_summary=count"]))?.Total ?? 0,
                MedicationAdministrationCount = (await fhir.SearchAsync<MedicationAdministration>([$"subject=Patient/{patient.Id}", "_summary=count"]))?.Total ?? 0,
                Json = await patient.ToJsonAsync()
            });
        }
    }

    private sealed record PatientRow
    {
        public required string Id { get; init; }
        public required string Name { get; init; }
        public required string Email { get; init; }
        public required int ObservationCount { get; init; }
        public required int MedicationAdministrationCount { get; init; }
        public required string Json { get; init; }
    }
}