@page "/connections"
@using DataLayer
@using DataLayer.Entities
@using Dexcom.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using TresComas.Services


@attribute [Authorize]

@inject UserProvider UserProvider
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IOptions<DexcomOptions> DexcomConfig
@inject TotalDataSyncService SyncService

<h1>Connections</h1>
<h2>Tidepool</h2>
<MudPaper Class="pa-4">
    <MudForm>
        <MudSwitch Color="Color.Primary" Class="ml-auto" Label="@(_input.TidepoolEnabled ? "Enabled" : "Disabled")" @bind-Value="@_input.TidepoolEnabled" />
        @if (_input.TidepoolEnabled)
        {
            <MudTextField @bind-Value="@_input.TidepoolUsername" T="string" Label="Username"/>
            <MudTextField @bind-Value="@_input.TidepoolPassword" T="string" Label="Password" InputType="InputType.Password"/>   
        }
    </MudForm>
</MudPaper>

<MudButton Class="ml-auto mt-5" OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>  

<div Class="pa-4"/>

<h2>Dexcom</h2>
<MudPaper Class="pa-4">
    <MudForm>
        <MudSwitch Color="Color.Primary" Class="ml-auto" Label="@(_dexcomInput.Enabled ? "Enabled" : "Disabled")" @bind-Value="@_dexcomInput.Enabled" />
        @if (_dexcomInput.Enabled)
        {
            <MudButton Class="ml-auto mt-5" OnClick="DexcomLogin" Variant="Variant.Filled" Color="Color.Primary" Disabled=@_dexcomInput.IsConnected>Login</MudButton>
        }
    </MudForm>
</MudPaper>

<div Class="pa-4" />
<h2>Data sync</h2>
<MudDatePicker Label="Since data since" @bind-Date="@_syncStart" />
<MudButton Class="ml-auto mt-5" OnClick="Sync" Variant="Variant.Filled" Color="Color.Primary" Disabled=@_syncInProgress>
    @if (_syncInProgress)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Syncing</MudText>
    }
    else
    {
        <MudText>Sync</MudText>
    }
</MudButton>
<MudAlert Class="mt-4" Severity="Severity.Error">This action will clear all of you data!</MudAlert>


@code {
    private readonly Input _input = new();
    private readonly DexcomInput _dexcomInput = new();
    private bool _syncInProgress = false;
    private DateTime? _syncStart = DateTime.Today.AddYears(-1);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var userId = await UserProvider.GetCurrentUserId();
        if (string.IsNullOrEmpty(userId))
        {
            return;
        }

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var settings = await dbContext.TidepoolUserSettings.FirstOrDefaultAsync(x => x.UserId == userId);
        if (settings is not null)
        {
            _input.TidepoolUsername = settings.TidepoolUsername;
            _input.TidepoolPassword = settings.TidepoolPassword;
        }

        _input.TidepoolEnabled = !string.IsNullOrEmpty(_input.TidepoolUsername);

        var dexcomSettings = await dbContext.DexcomUserSettings.FirstOrDefaultAsync(x => x.UserId == userId);
        if (dexcomSettings is not null)
        {
            _dexcomInput.Enabled = true;
            _dexcomInput.IsConnected = true;
        }
        else
        {
            _dexcomInput.Enabled = false;
            _dexcomInput.IsConnected = false;
        }
    }

    public async Task Save()
    {
        var userId = await UserProvider.GetCurrentUserId();
        if (string.IsNullOrEmpty(userId))
        {
            return;
        }

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var settings = await dbContext.TidepoolUserSettings.FirstOrDefaultAsync(x => x.UserId == userId);
        if (settings is null)
        {
            settings = new TidepoolUserSettings { UserId = userId, };
            dbContext.Add(settings);
        }
        if (_input.TidepoolEnabled)
        {
            settings.TidepoolUsername = _input.TidepoolUsername;
            settings.TidepoolPassword = _input.TidepoolPassword;
        }
        else
        {
            settings.TidepoolUsername = "";
            settings.TidepoolPassword = "";
        }

        await dbContext.SaveChangesAsync();
        Snackbar.Add("Settings saved", Severity.Success);
    }

    public void DexcomLogin()
    {
        var authUrl = "https://sandbox-api.dexcom.com/v2/oauth2/login?client_id=##ClientId##&redirect_uri=##Callback##&response_type=code&scope=offline_access";
        authUrl = authUrl
            .Replace("##ClientId##", DexcomConfig.Value.ClientId)
            .Replace("##Callback##", $"{DexcomConfig.Value.CallbackBaseUrl}/dexcom");

        NavigationManager.NavigateTo(authUrl);
    }

    public async Task Sync()
    {
        _syncInProgress = true;
        await SyncService.SyncAllData(_syncStart ?? DateTime.Now.AddYears(-1));
        _syncInProgress = false;
    }

    private sealed record Input
    {
        public bool TidepoolEnabled { get; set; }
        public string TidepoolUsername { get; set; } = "";
        public string TidepoolPassword { get; set; } = "";
    }

    private sealed record DexcomInput
    {
        public bool Enabled { get; set; }
        public bool IsConnected { get; set; }
    }
}