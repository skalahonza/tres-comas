@page "/statistics"

@using DataLayer
@using DataLayer.Entities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using TresComas.Services
@using ValueType = Syncfusion.Blazor.Charts.ValueType

@inject UserProvider UserProvider
@inject IDbContextFactory<ApplicationDbContext> _factory

@attribute [Authorize]
@attribute [StreamRendering(true)]

<PageTitle>Statistics</PageTitle>

<MudGrid>
    <MudItem md="8">
        <MudText Typo="Typo.h3" GutterBottom="true">Statistics</MudText>
    </MudItem>
    <MudItem md="1">
        <MudButton Variant="Variant.Filled" OnClick="MoveBack">Previous</MudButton>
    </MudItem>
    <MudItem md="2">
        <MudText Typo="Typo.subtitle1" Style="text-align: center; margin-top: 4px;">@StartDateTime.ToShortDateString() - @EndDateTime.ToShortDateString()</MudText>
    </MudItem>
    <MudItem md="1">
        <MudButton Variant="Variant.Filled" OnClick="MoveNext">Next</MudButton>
    </MudItem>
</MudGrid>

@if (IsLoading)
{
    <MudText Typo="Typo.subtitle1">Loading @LoadingPart.</MudText>
}

<MudText Typo="Typo.h4" GutterBottom="true">Bg, bolus and carbs values</MudText>

<SfChart @ref="ChartBg" Width="100%" Height="70%" Title="Bg values in time">
    <ChartEvents ChartMouseMove="OnMouseEventChartBg" ChartMouseUp="OnMouseLeaveChartBg" ChartMouseDown="ChartMouseDown" />
    <ChartPrimaryYAxis Title="Bg values (mmol/l)" />
    <ChartPrimaryXAxis ValueType="ValueType.DateTime" Title="Time" />

    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical" />
    <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />

    <ChartSeriesCollection>
        <ChartSeries DataSource="@ChartDataBg" XName="X" YName="Y" TooltipMappingName="Tooltip" Fill="darkblue" Name="Current Bg values" Type="ChartSeriesType.Spline" />
        <ChartSeries DataSource="@ChartDataBgOld" XName="X" YName="Y" TooltipMappingName="Tooltip" Fill="red" Name="Previous Bg values" Type="ChartSeriesType.Spline" />
    </ChartSeriesCollection>
</SfChart>

<SfChart @ref="ChartBolus" Width="100%" Height="70%" Title="Bolus values in time">
    <ChartEvents ChartMouseMove="OnMouseEventChartBolus" ChartMouseUp="OnMouseLeaveChartBolus" ChartMouseDown="ChartMouseDown" />
    <ChartPrimaryYAxis Title="Bolus values (unit)" />
    <ChartPrimaryXAxis ValueType="ValueType.DateTime" Title="Time" />

    <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />
    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical" />

    <ChartSeriesCollection>
        <ChartSeries DataSource="@ChartDataBolus" XName="X" YName="Y" TooltipMappingName="Tooltip" Fill="darkblue" ColumnWidth="1" Type="ChartSeriesType.Column" />
    </ChartSeriesCollection>
</SfChart>

<SfChart @ref="ChartCarbs" Width="100%" Height="70%" Title="Carbs values in time">
    <ChartEvents ChartMouseMove="OnMouseEventChartCarbs" ChartMouseUp="OnMouseLeaveChartCarbs" ChartMouseDown="ChartMouseDown" />
    <ChartPrimaryYAxis Title="Carbs values (g)" />
    <ChartPrimaryXAxis ValueType="ValueType.DateTime" Title="Time" />

    <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />
    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical" />

    <ChartSeriesCollection>
        <ChartSeries DataSource="@ChartDataCarbs" XName="X" YName="Y" TooltipMappingName="Tooltip" Fill="darkblue" ColumnWidth="1" Type="ChartSeriesType.Column" />
    </ChartSeriesCollection>
</SfChart>

<MudGrid>
    <MudItem md="5">
        <MudText Typo="Typo.subtitle1">Current average glucose: @AverageBg.ToString("0.0") mmol/l (SD: @Sd.ToString("0.0") mmol/l)</MudText>
    </MudItem>
    <MudItem md="5">
        <MudText Typo="Typo.subtitle1">Previous average glucose: @AverageBgOld.ToString("0.0") mmol/l (SD: @SdOld.ToString("0.0") mmol/l)</MudText>
    </MudItem>
    <MudItem md="2">
        <MudText Typo="Typo.subtitle1"></MudText>
    </MudItem>
    <MudItem md="4">
        <MudText Typo="Typo.subtitle1">
            Current sensor usage: @SensorUsage % @IntervalNotComplete
        </MudText>
    </MudItem>
    <MudItem md="4">
        <MudText Typo="Typo.subtitle1">Previous sensor usage: @SensorUsageOld %</MudText>
    </MudItem>
    <MudItem md="4">
        @if (string.IsNullOrWhiteSpace(IntervalNotComplete))
        {
            @if (SensorUsageOld > SensorUsage)
            {
                <MudText Typo="Typo.subtitle1"><p style="font-weight: bold; color: red">You wear your sensor less often</p></MudText>
            }
            else if (SensorUsageOld < SensorUsage)
            {
                <MudText Typo="Typo.subtitle1"><p style="font-weight: bold; color: green">You wear your sensor more often</p></MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle1"></MudText>
            }
        }
        else
        {
            <MudText Typo="Typo.subtitle1"></MudText>
        }
    </MudItem>
    <MudItem md="12">
        <MudText Typo="Typo.subtitle1"></MudText>
    </MudItem>
</MudGrid>

<MudText Typo="Typo.h4" GutterBottom="true">Time in range evaluation</MudText>

<MudGrid>
    <MudItem md="5">
        <SfAccumulationChart Title="Time in range histogram - pie">

            <AccumulationChartTooltipSettings Enable="true" Format="${point.tooltip}" />

            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@TimeInRangeDetails" XName="Type" YName="Percent" PointColorMapping="Fill"
                                         Name="Type" InnerRadius="40%" TooltipMappingName="Tooltip">

                    <AccumulationDataLabelSettings Visible="true" Name="Type"></AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>

            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
        </SfAccumulationChart>
    </MudItem>
    <MudItem md="3">
        <SfChart Title="Time in range histogram - bar">
            <ChartPrimaryYAxis Title="Percent" />
            <ChartPrimaryXAxis ValueType="ValueType.Category" />

            <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@TimeInRangeDetailsBar" XName="X" YName="Y1" TooltipMappingName="Tooltip1"
                             Fill="darkred" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@TimeInRangeDetailsBar" XName="X" YName="Y2" TooltipMappingName="Tooltip2"
                             Fill="pink" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@TimeInRangeDetailsBar" XName="X" YName="Y3" TooltipMappingName="Tooltip3"
                             Fill="green" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@TimeInRangeDetailsBar" XName="X" YName="Y4" TooltipMappingName="Tooltip4"
                             Fill="yellow" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@TimeInRangeDetailsBar" XName="X" YName="Y5" TooltipMappingName="Tooltip5"
                             Fill="orange" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>

    <MudItem md="4">
        <MudText Typo="Typo.h1">&nbsp;</MudText>
        <MudText Typo="Typo.subtitle1">@TimeInRangeDetailsBar[0].Tooltip5Alt</MudText>
        <MudText Typo="Typo.h5">@TimeInRangeDetailsBar[0].Tooltip4Alt</MudText>
        <MudText Typo="Typo.h4">@TimeInRangeDetailsBar[0].Tooltip3Alt</MudText>
        <MudText Typo="Typo.h5">@TimeInRangeDetailsBar[0].Tooltip2Alt</MudText>
        <MudText Typo="Typo.subtitle1">@TimeInRangeDetailsBar[0].Tooltip1Alt</MudText>
        <MudText Typo="Typo.h1">&nbsp;</MudText>
    </MudItem>

    <MudItem md="12">
        <MudText Typo="Typo.h4" GutterBottom="true">GRI statistics</MudText>
    </MudItem>

    <MudItem md="4">
        <SfChart Height="400px" Width="400px" Title="GRI">
            <ChartPrimaryYAxis Title="Hyperglycemia component (%)" />
            <ChartPrimaryXAxis ValueType="ValueType.Double" Title="Hypoglycemia Component (%)" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@GriRangeValues" XName="X" YName="Y1" Fill="green" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@GriRangeValues" XName="X" YName="Y2" Fill="lightgreen" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@GriRangeValues" XName="X" YName="Y3" Fill="yellow" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@GriRangeValues" XName="X" YName="Y4" Fill="pink" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@GriRangeValues" XName="X" YName="Y5" Fill="darkred" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@GriResultValue" XName="X" YName="Y" Fill="black" Type="ChartSeriesType.Bubble" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>
    <MudItem md="6">
        <MudText Typo="Typo.h1">&nbsp;</MudText>
        <MudText Typo="Typo.h5">&nbsp;</MudText>
        <MudText Typo="Typo.h4">Your GRI value is @Gri.</MudText>
        <MudText Typo="Typo.body1">You are in @ZoneText</MudText>
        <MudText Typo="Typo.body1">Hypoglycemia component - @HypoPercent.ToString("0.00") %</MudText>
        <MudText Typo="Typo.body1">Hyperglycemia component - @HyperPercent.ToString("0.00") %</MudText>
        <MudText Typo="Typo.h5">&nbsp;</MudText>
        <MudText Typo="Typo.h1">&nbsp;</MudText>
    </MudItem>

    <MudItem md="6">
        <MudText Typo="Typo.h5" GutterBottom="true">Historic GRI (per 3 months result)</MudText>
    </MudItem>

    <MudItem md="10">
        <SfChart Width="100%" Height="400px" Title="GRI values by months">
            <ChartPrimaryYAxis Title="GRI value" />
            <ChartPrimaryXAxis ValueType="ValueType.DateTime" Title="Months" />

            <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical" />
            <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartDataGriHistory" XName="X" YName="Y" TooltipMappingName="Tooltip" Fill="darkblue" Type="ChartSeriesType.Spline" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>

    <MudItem md="2">
        <MudText Typo="Typo.h5">&nbsp;</MudText>
        <MudText Typo="Typo.subtitle1"></MudText>
        <MudText Typo="Typo.h5">Max: @GriMax</MudText>
        <MudText Typo="Typo.subtitle1">Date: @GriMaxDate</MudText>
        <MudText Typo="Typo.subtitle1"></MudText>
        <MudText Typo="Typo.h5">Min: @GriMin</MudText>
        <MudText Typo="Typo.subtitle1">Date: @GriMinDate</MudText>
        <MudText Typo="Typo.h5"></MudText>
        <MudText Typo="Typo.subtitle1"></MudText>
        <MudText Typo="Typo.h1">&nbsp;</MudText>
    </MudItem>
</MudGrid>

@code {
    public SfChart ChartBg = null!;
    public SfChart ChartBolus = null!;
    public SfChart ChartCarbs = null!;
    private bool _isTouch;
    private string? _userId;
    private int _daysCount = 7;
    private bool _isTapHold = false;
    private bool _isMouseMoveUpDetected;

    public int Gri { get; set; }
    public double Sd { get; set; }
    public int GriMax { get; set; }
    public int GriMin { get; set; }
    public double SdOld { get; set; }
    public bool IsLoading { get; set; }
    public int SensorUsage { get; set; }
    public double AverageBg { get; set; }
    public string? ZoneText { get; set; }
    public string? GriMaxDate { get; set; }
    public string? GriMinDate { get; set; }
    public int SensorUsageOld { get; set; }
    public double HypoPercent { get; set; }
    public double AverageBgOld { get; set; }
    public double HyperPercent { get; set; }
    public string? LoadingPart { get; set; }
    public DateTime EndDateTime { get; set; }
    public DateTime StartDateTime { get; set; }
    public List<ChartTimeData> ChartDataBg = [];
    public List<ChartTimeData> ChartDataBgOld = [];
    public List<ChartPoint> GriResultValue = [new()];
    public List<GriRangeValue> GriRangeValues = [];
    public List<ChartTimeData> ChartDataBolus = [];
    public List<ChartTimeData> ChartDataCarbs = [];
    public List<StatisticsPie> TimeInRangeDetails = [];
    public List<ChartTimeData> ChartDataGriHistory = [];
    public List<StatisticsBar> TimeInRangeDetailsBar = [new()];
    public string IntervalNotComplete { get; set; } = "(Interval not finished)";

    protected async override Task OnInitializedAsync()
    {
        EndDateTime = DateTime.UtcNow;
        EndDateTime = EndDateTime.AddHours(-EndDateTime.Hour).AddMinutes(-EndDateTime.Minute).AddSeconds(-EndDateTime.Second).AddMilliseconds(-EndDateTime.Millisecond).AddMicroseconds(-EndDateTime.Microsecond);
        EndDateTime = EndDateTime.AddDays(1).AddSeconds(-1);
        StartDateTime = EndDateTime.AddDays(-_daysCount);

        _userId = await UserProvider.GetCurrentUserId();
        if (string.IsNullOrEmpty(_userId))
            return;

        await LoadData();
        await LoadGriHistory();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        LoadingPart = "Bg values for current interval";
        await InvokeAsync(() => StateHasChanged());

        using var connection = await _factory.CreateDbContextAsync();
        var bgElements = await connection.BgValues.OrderBy(x => x.Time).Where(x => x.UserId == _userId && x.Time > StartDateTime && x.Time < EndDateTime).ToListAsync();
        if (bgElements?.Any() is not true)
        {
            IsLoading = false;
            return;
        }

        LoadingPart = "Bg values for previous time interval";
        await InvokeAsync(() => StateHasChanged());

        var startDateTimeOld = StartDateTime.AddDays(-_daysCount);
        var bgElementsOld = await connection.BgValues.OrderBy(x => x.Time).Where(x => x.UserId == _userId && x.Time > startDateTimeOld && x.Time < StartDateTime).ToListAsync();
        if (bgElementsOld?.Any() is not true)
        {
            IsLoading = false;
            return;
        }

        bgElements = bgElements.Where(x => x.Value.ToString().Length < 9).DistinctBy(x => x.Time).ToList();
        bgElementsOld = bgElementsOld.Where(x => x.Value.ToString().Length < 9).DistinctBy(x => x.Time).ToList();

        HandleBgValuesChartData(bgElements, bgElementsOld);
        CalculateGri(bgElements);

        var firstBgValue = bgElements[0];
        var lastBgValue = bgElements[^1];

        LoadingPart = "Bolus values";
        await InvokeAsync(() => StateHasChanged());

        var bolusElements = await connection.BolusValues.OrderBy(x => x.Time).Where(x => x.UserId == _userId && x.Time > StartDateTime && x.Time < EndDateTime).ToListAsync();
        var filteredBolus = bolusElements.Where(x => x.Time >= firstBgValue.Time && x.Time <= lastBgValue.Time);
        HandleBolusValuesChartData(filteredBolus, bgElements, firstBgValue, lastBgValue);

        LoadingPart = "Carbs values";
        await InvokeAsync(() => StateHasChanged());

        var carbsElements = await connection.CarbsValues.OrderBy(x => x.Time).Where(x => x.UserId == _userId && x.Time > StartDateTime && x.Time < EndDateTime).ToListAsync();
        var filteredCarbs = carbsElements.Where(x => x.Time >= firstBgValue.Time && x.Time <= lastBgValue.Time);
        HandleCarbsValuesChartData(filteredCarbs, bgElements, firstBgValue, lastBgValue);

        IsLoading = false;
    }

    private void HandleBgValuesChartData(IEnumerable<BgValue> elements, IEnumerable<BgValue> elementsOld)
    {
        ChartDataBg = elements.Select(x => new ChartTimeData()
        {
            X = x.Time,
            DateTimeTooltip = x.Time,
            Y = x.Value,
            Unit = "mmol/l",
        }).ToList();

        ChartDataBgOld = elementsOld.Select(x => new ChartTimeData()
        {
            X = x.Time.AddDays(_daysCount),
            DateTimeTooltip = x.Time,
            Y = x.Value,
            Unit = "mmol/l",
        }).ToList();

        AverageBg = elements.Average(x => x.Value);
        AverageBgOld = elementsOld.Average(x => x.Value);

        Sd = standardDeviation(elements.Select(x => x.Value));
        SdOld = standardDeviation(elementsOld.Select(x => x.Value));

        var readingsInWeek = 2016;
        SensorUsage = (int)(elements.Count() / (double)readingsInWeek * 100.0);
        SensorUsageOld = (int)(elementsOld.Count() / (double)readingsInWeek * 100.0);
    }

    private double standardDeviation(IEnumerable<double> sequence)
    {
        double result = 0;

        if (sequence.Any())
        {
            double average = sequence.Average();
            double sum = sequence.Sum(d => Math.Pow(d - average, 2));
            result = Math.Sqrt((sum) / sequence.Count());
        }
        return result;
    }

    private void CalculateGri(IEnumerable<BgValue> elements)
    {
        double count = (double)elements.Count();
        double veryLow, low, high, veryHigh;
        veryLow = elements.Where(x => x.Value < 3.0).Count() / count * 100;
        low = elements.Where(x => 3.0 < x.Value && x.Value < 3.9).Count() / count * 100;
        high = elements.Where(x => 10.0 < x.Value && x.Value < 13.9).Count() / count * 100;
        veryHigh = elements.Where(x => 13.9 < x.Value).Count() / count * 100;

        HandleGriChartData(veryLow, low, high, veryHigh);
        HandleTimeInRangeChartData(veryLow, low, high, veryHigh);
    }

    private void HandleGriChartData(double veryLow, double low, double high, double veryHigh)
    {
        HypoPercent = veryLow + (0.8 * low);
        HyperPercent = veryHigh + (0.5 * high);
        Gri = (int)((3.0 * HypoPercent) + (1.6 * HyperPercent));

        ZoneText = Gri switch
        {
            <= 20 => "Zone A (0-20) - It is PERFECT result!!!",
            > 20 and <= 40 => "Zone B (21-40) - You are doing great.",
            > 40 and <= 60 => "Zone C (41-60) - Not great, not terrible.",
            > 60 and <= 80 => "Zone D (61-80) - It's time for self improve.",
            _ => "Zone E (81-100) - You have to work on yourself, please."
        };

        GriResultValue = [new ChartPoint() { X = HypoPercent, Y = HyperPercent }];
        GriRangeValues = [
            new GriRangeValue()
            {
                X = 0,
                Y1 = 12.5,
                Y2 = 12.5,
                Y3 = 12.5,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 6.6,
                Y1 = 0,
                Y2 = 12.5,
                Y3 = 12.5,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 13.3,
                Y1 = 0,
                Y2 = 0,
                Y3 = 12.5,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 20,
                Y1 = 0,
                Y2 = 0,
                Y3 = 0,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 26.6,
                Y1 = 0,
                Y2 = 0,
                Y3 = 0,
                Y4 = 0,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 33.3,
                Y1 = 0,
                Y2 = 0,
                Y3 = 0,
                Y4 = 0,
                Y5 = 0,
            }
        ];
    }

    private void HandleTimeInRangeChartData(double veryLow, double low, double high, double veryHigh)
    {
        var inRange = 100 - veryLow - low - high - veryHigh;
        TimeInRangeDetails =
        [
            new StatisticsPie { Type = "Very low", Percent = veryLow, Fill = "darkred" },
            new StatisticsPie { Type = "Low", Percent = low, Fill = "pink" },
            new StatisticsPie { Type = "In range", Percent = inRange, Fill = "green" },
            new StatisticsPie { Type = "High", Percent = high , Fill = "yellow" },
            new StatisticsPie { Type = "Very high", Percent = veryHigh, Fill = "orange" },
    ];

        TimeInRangeDetailsBar =
        [
            new StatisticsBar()
            {
                Y1 = veryLow,
                Y2 = low,
                Y3 = inRange,
                Y4 = high,
                Y5 = veryHigh,
                Type1 = "Very low",
                Type2 = "Low",
                Type3 = "In range",
                Type4 = "High",
                Type5 = "Very high",
            }
        ];
    }

    private void HandleBolusValuesChartData(IEnumerable<BolusValue> elements, IEnumerable<BgValue> bgElements, BgValue firstBgValue, BgValue lastBgValue)
    {
        var convertedValues = elements.Select(x => new ChartTimeData()
        {
            X = x.Time,
            DateTimeTooltip = x.Time,
            Y = (double)x.Unit,
            Unit = x.Unit > 1 ? "units" : "unit",
        }).ToList();

        if (elements.FirstOrDefault()?.Time != firstBgValue.Time)
            convertedValues.Insert(0, new()
            {
                X = firstBgValue.Time,
                DateTimeTooltip = firstBgValue.Time,
                Y = 0.0001,
                Unit = "Boundary mark",
            });

        if (elements.LastOrDefault()?.Time != lastBgValue.Time)
            convertedValues.Insert(0, new()
            {
                X = lastBgValue.Time,
                DateTimeTooltip = lastBgValue.Time,
                Y = 0.0001,
                Unit = "Boundary mark",
            });

        var missingDateTimes = bgElements.Select(x => x.Time).Where(x => !convertedValues.Select(x => x.X).Contains(x));
        foreach (var dateTime in missingDateTimes)
            convertedValues.Add(new()
            {
                X = dateTime,
                DateTimeTooltip = dateTime,
                Y = 0,
                Unit = "unit",
            });

        ChartDataBolus = convertedValues.OrderBy(x => x.X).ToList();
    }

    private void HandleCarbsValuesChartData(IEnumerable<CarbsValue> elements, IEnumerable<BgValue> bgElements, BgValue firstBgValue, BgValue lastBgValue)
    {
        var convertedValues = elements.Select(x => new ChartTimeData()
        {
            X = x.Time,
            DateTimeTooltip = x.Time,
            Y = (double)x.Value,
            Unit = "g",
        }).ToList();

        if (elements.FirstOrDefault()?.Time != firstBgValue.Time)
            convertedValues.Insert(0, new()
            {
                X = firstBgValue.Time,
                DateTimeTooltip = firstBgValue.Time,
                Y = 0.0001,
                Unit = "Boundary mark",
            });

        if (elements.LastOrDefault()?.Time != lastBgValue.Time)
            convertedValues.Insert(0, new()
            {
                X = lastBgValue.Time,
                DateTimeTooltip = lastBgValue.Time,
                Y = 0.0001,
                Unit = "Boundary mark",
            });

        var missingDateTimes = bgElements.Select(x => x.Time).Where(x => !convertedValues.Select(x => x.X).Contains(x));
        foreach (var dateTime in missingDateTimes)
            convertedValues.Add(new()
            {
                X = dateTime,
                DateTimeTooltip = dateTime,
                Y = 0,
                Unit = "g",
            });

        ChartDataCarbs = convertedValues.OrderBy(x => x.X).ToList();
    }

    private async Task LoadGriHistory()
    {
        var dateTime = DateTime.UtcNow;
        List<List<BgValue>> values = [];
        List<ChartTimeData> chartData = [];
        using var connection = await _factory.CreateDbContextAsync();

        IsLoading = true;
        LoadingPart = "historic GRI values";
        await InvokeAsync(() => StateHasChanged());

        for (int i = 0; i < 20; i++)
        {
            var startDateTime = dateTime.AddMonths(-3);
            var temp = await connection.BgValues.OrderBy(x => x.Time).Where(x => x.UserId == _userId && x.Time > startDateTime && x.Time < dateTime).ToListAsync();

            if (!temp.Any())
                continue;

            chartData.Add(AddHistoryGriChartValue(temp));
            dateTime = dateTime.AddMonths(-3);
        }

        var griMax = chartData.MaxBy(x => x.Y);
        var griMin = chartData.MinBy(x => x.Y);

        GriMax = (int)griMax!.Y;
        GriMin = (int)griMin!.Y;

        GriMaxDate = griMax.X.ToString("MMMM yyyy");
        GriMinDate = griMin.X.ToString("MMMM yyyy");

        IsLoading = false;
        ChartDataGriHistory = chartData;
        await InvokeAsync(() => StateHasChanged());
    }

    private ChartTimeData AddHistoryGriChartValue(IEnumerable<BgValue> elements)
    {
        double count = (double)elements.Count();
        double veryLow, low, high, veryHigh;
        veryLow = elements.Where(x => x.Value < 3.0).Count() / count * 100;
        low = elements.Where(x => 3.0 < x.Value && x.Value < 3.9).Count() / count * 100;
        high = elements.Where(x => 10.0 < x.Value && x.Value < 13.9).Count() / count * 100;
        veryHigh = elements.Where(x => 13.9 < x.Value).Count() / count * 100;

        var hypoPercent = veryLow + (0.8 * low);
        var hyperPercent = veryHigh + (0.5 * high);
        var gri = (int)((3.0 * hypoPercent) + (1.6 * hyperPercent));

        return new()
        {
            X = elements.First().Time,
            SpecificTooltip = $"{elements.First().Time.ToString("MMMM yyyy")} - {gri}",
            Y = gri,
        };
    }

    private async Task MoveBack()
    {
        EndDateTime = EndDateTime.AddDays(-_daysCount);
        StartDateTime = StartDateTime.AddDays(-_daysCount);
        IntervalNotComplete = string.Empty;

        await LoadData();
    }

    private async Task MoveNext()
    {
        if (EndDateTime > DateTime.Now)
            return;

        EndDateTime = EndDateTime.AddDays(_daysCount);
        StartDateTime = StartDateTime.AddDays(_daysCount);

        if (EndDateTime > DateTime.Now)
            IntervalNotComplete = "(Interval not finished)";

        await LoadData();
    }

    public void ChartMouseDown(ChartMouseEventArgs changeEventArgs)
    {
        _isMouseMoveUpDetected = false;
        _isTouch = true;
    }

    public void OnMouseEventChartBg(ChartMouseEventArgs args)
    {
        ChartBolus!.ShowTooltip(args.MouseX, args.MouseY, false);
        ChartCarbs!.ShowTooltip(args.MouseX, args.MouseY, false);

        ChartBolus!.ShowCrosshair(args.MouseX, args.MouseY);
        ChartCarbs!.ShowCrosshair(args.MouseX, args.MouseY);
    }

    public void OnMouseEventChartBolus(ChartMouseEventArgs args)
    {
        ChartBg!.ShowTooltip(args.MouseX, args.MouseY, false);
        ChartCarbs!.ShowTooltip(args.MouseX, args.MouseY, false);

        ChartBg!.ShowCrosshair(args.MouseX, args.MouseY);
        ChartCarbs!.ShowCrosshair(args.MouseX, args.MouseY);
    }

    public void OnMouseEventChartCarbs(ChartMouseEventArgs args)
    {
        ChartBg!.ShowTooltip(args.MouseX, args.MouseY, false);
        ChartBolus!.ShowTooltip(args.MouseX, args.MouseY, false);

        ChartBg!.ShowCrosshair(args.MouseX, args.MouseY);
        ChartBolus!.ShowCrosshair(args.MouseX, args.MouseY);
    }

    public void OnMouseLeaveChartBg()
    {
        ChartBolus!.HideTooltip();
        ChartCarbs!.HideTooltip();

        ChartBolus!.HideCrosshair();
        ChartCarbs!.HideCrosshair();
    }

    public void OnMouseLeaveChartBolus()
    {
        ChartBg!.HideTooltip();
        ChartCarbs!.HideTooltip();

        ChartBg!.HideCrosshair();
        ChartCarbs!.HideCrosshair();
    }

    public void OnMouseLeaveChartCarbs()
    {
        ChartBg!.HideTooltip();
        ChartBolus!.HideTooltip();

        ChartBg!.HideCrosshair();
        ChartBolus!.HideCrosshair();
    }

    public void OnMouseLeaveChartBg(ChartMouseEventArgs args)
    {
        _isTapHold = false;
        _isTouch = false;
        _isMouseMoveUpDetected = true;

        ChartBolus!.HideTooltip();
        ChartCarbs!.HideTooltip();

        ChartBolus!.HideCrosshair();
        ChartCarbs!.HideCrosshair();
    }

    public void OnMouseLeaveChartBolus(ChartMouseEventArgs args)
    {
        _isTapHold = false;
        _isTouch = false;
        _isMouseMoveUpDetected = true;

        ChartBg!.HideTooltip();
        ChartCarbs!.HideTooltip();

        ChartBg!.HideCrosshair();
        ChartCarbs!.HideCrosshair();
    }

    public void OnMouseLeaveChartCarbs(ChartMouseEventArgs args)
    {
        _isTapHold = false;
        _isTouch = false;
        _isMouseMoveUpDetected = true;

        ChartBg!.HideTooltip();
        ChartBolus!.HideTooltip();

        ChartBg!.HideCrosshair();
        ChartBolus!.HideCrosshair();
    }

    public class ChartTimeData
    {
        public DateTime X { get; set; }
        public DateTime DateTimeTooltip { get; set; }
        public double Y { get; set; }
        public string? Unit { get; set; }
        public string? SpecificTooltip { get; set; }
        public string? Tooltip => string.IsNullOrWhiteSpace(SpecificTooltip) ? $"{DateTimeTooltip:g} - {Y:0.00} {Unit}" : SpecificTooltip;
    }

    public class ChartPoint
    {
        public double X { get; set; }
        public double Y { get; set; }
    }

    public class GriRangeValue
    {
        public double X { get; set; }
        public double Y1 { get; set; }
        public double Y2 { get; set; }
        public double Y3 { get; set; }
        public double Y4 { get; set; }
        public double Y5 { get; set; }
    }

    public class StatisticsBar
    {
        public string X => "Histogram";
        public double Y1 { get; set; }
        public double Y2 { get; set; }
        public double Y3 { get; set; }
        public double Y4 { get; set; }
        public double Y5 { get; set; }
        public string? Type1 { get; set; }
        public string? Type2 { get; set; }
        public string? Type3 { get; set; }
        public string? Type4 { get; set; }
        public string? Type5 { get; set; }
        public string Tooltip1 => $"{Type1} - {Y1:0.00} %";
        public string Tooltip2 => $"{Type2} - {Y2:0.00} %";
        public string Tooltip3 => $"{Type3} - {Y3:0.00} %";
        public string Tooltip4 => $"{Type4} - {Y4:0.00} %";
        public string Tooltip5 => $"{Type5} - {Y5:0.00} %";
        public string Tooltip1Alt => $"{Y1:0.00} % - {Type1}";
        public string Tooltip2Alt => $"{Y2:0.00} % - {Type2}";
        public string Tooltip3Alt => $"{Y3:0.00} % - {Type3}";
        public string Tooltip4Alt => $"{Y4:0.00} % - {Type4}";
        public string Tooltip5Alt => $"{Y5:0.00} % - {Type5}";
    }

    public class StatisticsPie
    {
        public string? Type { get; set; }
        public double Percent { get; set; }
        public string? Fill { get; set; }
        public string? Tooltip => $"{Type} - {Percent:#.00} %";
    }
}
