@page "/"
@using DataLayer.Entities
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.Charts
@using TresComas.Services
@using ValueType = Syncfusion.Blazor.Charts.ValueType
@using static TresComas.Components.Pages.Statistics

@inject DashboardDataService DashboardDataService

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="2" Class="ma-4">
        <div class="d-flex flex-column align-center align-content-space-between justify-center">
         <MudText Typo="Typo.h1">@Progress.Emoji</MudText>
         <MudTooltip Text="@Progress.TotalXp.ToString()">
          <MudProgressLinear Color="Color.Success" Value="@Progress.LevelProgress"/>
            <MudText Typo="Typo.h5">LVL. @Progress.Level</MudText>
         </MudTooltip>

    </div>
    </MudItem>
    <MudItem xs="8" Class="ma-4">
        <MudText Typo="Typo.h3">@Progress.Description</MudText>
    </MudItem>

    <div class="mt-8" />

    <MudItem xs="6">
        <MudText Typo="Typo.h5">@DashboardDataService.PreviousStart.ToString("dd. MM. yyyy") - @DashboardDataService.PreviousEnd.ToString("dd. MM. yyyy")</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.h5">@DashboardDataService.CurrentStart.ToString("dd. MM. yyyy") - @DashboardDataService.CurrentEnd.ToString("dd. MM. yyyy")</MudText>
    </MudItem>

    <MudItem xs="4">
        <SfChart Title="Time in range">
            <ChartPrimaryYAxis Title="Percent" />
            <ChartPrimaryXAxis ValueType="ValueType.Category" />

            <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@Prev.TimeInRangeDetailsBar" XName="X" YName="Y1" TooltipMappingName="Tooltip1"
                Fill="darkred" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Prev.TimeInRangeDetailsBar" XName="X" YName="Y2" TooltipMappingName="Tooltip2"
                Fill="pink" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Prev.TimeInRangeDetailsBar" XName="X" YName="Y3" TooltipMappingName="Tooltip3"
                Fill="green" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Prev.TimeInRangeDetailsBar" XName="X" YName="Y4" TooltipMappingName="Tooltip4"
                Fill="yellow" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Prev.TimeInRangeDetailsBar" XName="X" YName="Y5" TooltipMappingName="Tooltip5"
                Fill="orange" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>
    <MudItem xs="2">
        <MudText Typo="Typo.h1">&nbsp;</MudText>
        <MudText Typo="Typo.subtitle1">@Prev.TimeInRangeDetailsBar[0].Tooltip5Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Prev.TimeInRangeDetailsBar[0].Tooltip4Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Prev.TimeInRangeDetailsBar[0].Tooltip3Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Prev.TimeInRangeDetailsBar[0].Tooltip2Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Prev.TimeInRangeDetailsBar[0].Tooltip1Alt</MudText>
        <MudText Typo="Typo.h1">&nbsp;</MudText>
    </MudItem>

    <MudItem xs="4">
        <SfChart Title="Time in range">
            <ChartPrimaryYAxis Title="Percent" />
            <ChartPrimaryXAxis ValueType="ValueType.Category" />

            <ChartTooltipSettings Enable="true" Format="${point.tooltip}" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@Curr.TimeInRangeDetailsBar" XName="X" YName="Y1" TooltipMappingName="Tooltip1"
                Fill="darkred" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Curr.TimeInRangeDetailsBar" XName="X" YName="Y2" TooltipMappingName="Tooltip2"
                Fill="pink" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Curr.TimeInRangeDetailsBar" XName="X" YName="Y3" TooltipMappingName="Tooltip3"
                Fill="green" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Curr.TimeInRangeDetailsBar" XName="X" YName="Y4" TooltipMappingName="Tooltip4"
                Fill="yellow" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
                <ChartSeries DataSource="@Curr.TimeInRangeDetailsBar" XName="X" YName="Y5" TooltipMappingName="Tooltip5"
                Fill="orange" ColumnWidth="0.2" Type="ChartSeriesType.StackingColumn100" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>
    <MudItem xs="2">
        <MudText Typo="Typo.h1">&nbsp;</MudText>
        <MudText Typo="Typo.subtitle1">@Curr.TimeInRangeDetailsBar[0].Tooltip5Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Curr.TimeInRangeDetailsBar[0].Tooltip4Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Curr.TimeInRangeDetailsBar[0].Tooltip3Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Curr.TimeInRangeDetailsBar[0].Tooltip2Alt</MudText>
        <MudText Typo="Typo.subtitle1">@Curr.TimeInRangeDetailsBar[0].Tooltip1Alt</MudText>
        <MudText Typo="Typo.h1">&nbsp;</MudText>
    </MudItem>

    <MudItem md="6">
        <MudText Typo="Typo.h6">Your GRI value was @Prev.Gri.</MudText>
        <MudText Typo="Typo.body1">You are were @Prev.ZoneText</MudText>
        <SfChart Height="400px" Width="400px" Title="GRI">
            <ChartPrimaryYAxis Title="Hyperglycemia component (%)" />
            <ChartPrimaryXAxis ValueType="ValueType.Double" Title="Hypoglycemia Component (%)" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@Prev.GriRangeValues" XName="X" YName="Y1" Fill="green" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Prev.GriRangeValues" XName="X" YName="Y2" Fill="lightgreen" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Prev.GriRangeValues" XName="X" YName="Y3" Fill="yellow" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Prev.GriRangeValues" XName="X" YName="Y4" Fill="pink" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Prev.GriRangeValues" XName="X" YName="Y5" Fill="darkred" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Prev.GriResultValue" XName="X" YName="Y" Fill="black" Type="ChartSeriesType.Bubble" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>

    <MudItem md="6">
        <MudText Typo="Typo.h6">Your GRI value is @Curr.Gri.</MudText>
        <MudText Typo="Typo.body1">You are in @Curr.ZoneText</MudText>
        <SfChart Height="400px" Width="400px" Title="GRI">
            <ChartPrimaryYAxis Title="Hyperglycemia component (%)" />
            <ChartPrimaryXAxis ValueType="ValueType.Double" Title="Hypoglycemia Component (%)" />

            <ChartSeriesCollection>
                <ChartSeries DataSource="@Curr.GriRangeValues" XName="X" YName="Y1" Fill="green" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Curr.GriRangeValues" XName="X" YName="Y2" Fill="lightgreen" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Curr.GriRangeValues" XName="X" YName="Y3" Fill="yellow" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Curr.GriRangeValues" XName="X" YName="Y4" Fill="pink" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Curr.GriRangeValues" XName="X" YName="Y5" Fill="darkred" Type="ChartSeriesType.StackingArea" />
                <ChartSeries DataSource="@Curr.GriResultValue" XName="X" YName="Y" Fill="black" Type="ChartSeriesType.Bubble" />
            </ChartSeriesCollection>
        </SfChart>
    </MudItem>
</MudGrid>

@code {
    private BarValues Prev { get; set; } = new();
    private BarValues Curr { get; set; } = new();
    private Progress Progress { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var bgData = await DashboardDataService.GetBgData();

        Prev = CalculateGri(bgData.Prev);
        Curr = CalculateGri(bgData.Curr);

        Progress = DashboardDataService.CalculateProgress(Prev.ToHistory(), Curr.ToHistory());
    }

    private BarValues CalculateGri(IEnumerable<BgValue> elements)
    {
        double count = (double)elements.Count();
        double veryLow, low, high, veryHigh;
        veryLow = elements.Where(x => x.Value < 3.0).Count() / count * 100;
        low = elements.Where(x => 3.0 < x.Value && x.Value < 3.9).Count() / count * 100;
        high = elements.Where(x => 10.0 < x.Value && x.Value < 13.9).Count() / count * 100;
        veryHigh = elements.Where(x => 13.9 < x.Value).Count() / count * 100;

        var griValues = HandleGriChartData(veryLow, low, high, veryHigh);
        var rangeValues = HandleTimeInRangeChartData(veryLow, low, high, veryHigh);

        griValues.TimeInRangeDetailsBar = rangeValues.TimeInRangeDetailsBar;
        griValues.TimeInRangeDetails = rangeValues.TimeInRangeDetails;
        griValues.VeryHigh = rangeValues.VeryHigh;
        griValues.High = rangeValues.High;
        griValues.InRange = rangeValues.InRange;
        griValues.Low = rangeValues.Low;
        griValues.VeryLow = rangeValues.VeryLow;

        return griValues;   
    }

    private BarValues HandleGriChartData(double veryLow, double low, double high, double veryHigh)
    {
        var hypoPercent = veryLow + (0.8 * low);
        var hyperPercent = veryHigh + (0.5 * high);
        var gri = (int)((3.0 * hypoPercent) + (1.6 * hyperPercent));

        var zoneText = gri switch
        {
            <= 20 => "Zone A (0-20) - It is PERFECT result!!!",
            > 20 and <= 40 => "Zone B (21-40) - You are doing great.",
            > 40 and <= 60 => "Zone C (41-60) - Not great, not terrible.",
            > 60 and <= 80 => "Zone D (61-80) - It's time for self improve.",
            _ => "Zone E (81-100) - You have to work on yourself, please."
        };

        List<ChartPoint> griResultValue = [new ChartPoint() { X = hypoPercent, Y = hyperPercent }];
        List<GriRangeValue> griRangeValues = [
            new GriRangeValue()
            {
                X = 0,
                Y1 = 12.5,
                Y2 = 12.5,
                Y3 = 12.5,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 6.6,
                Y1 = 0,
                Y2 = 12.5,
                Y3 = 12.5,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 13.3,
                Y1 = 0,
                Y2 = 0,
                Y3 = 12.5,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 20,
                Y1 = 0,
                Y2 = 0,
                Y3 = 0,
                Y4 = 12.5,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 26.6,
                Y1 = 0,
                Y2 = 0,
                Y3 = 0,
                Y4 = 0,
                Y5 = 12.5,
            },
            new GriRangeValue()
            {
                X = 33.3,
                Y1 = 0,
                Y2 = 0,
                Y3 = 0,
                Y4 = 0,
                Y5 = 0,
            }
        ];

        return new BarValues()
        {
            HypoPercent = hypoPercent,
            HyperPercent = hyperPercent,
            Gri = gri,
            ZoneText = zoneText,
            GriRangeValues = griRangeValues,
            GriResultValue = griResultValue
        };
    }

    private BarValues HandleTimeInRangeChartData(double veryLow, double low, double high, double veryHigh)
    {
        var inRange = 100 - veryLow - low - high - veryHigh;
        List<StatisticsPie> timeInRangeDetails =
            [
            new StatisticsPie { Type = "Very low", Percent = veryLow, Fill = "darkred" },
            new StatisticsPie { Type = "Low", Percent = low, Fill = "pink" },
            new StatisticsPie { Type = "In range", Percent = inRange, Fill = "green" },
            new StatisticsPie { Type = "High", Percent = high , Fill = "yellow" },
            new StatisticsPie { Type = "Very high", Percent = veryHigh, Fill = "orange" },
    ];

        List<StatisticsBar> timeInRangeDetailsBar =
            [
            new StatisticsBar()
            {
                Y1 = veryLow,
                Y2 = low,
                Y3 = inRange,
                Y4 = high,
                Y5 = veryHigh,
                Type1 = "Very low",
                Type2 = "Low",
                Type3 = "In range",
                Type4 = "High",
                Type5 = "Very high",
            }
        ];

        return new BarValues()
            {
                TimeInRangeDetails = timeInRangeDetails,
                TimeInRangeDetailsBar = timeInRangeDetailsBar,
                VeryHigh = veryHigh,
                High = high,
                InRange = inRange,
                Low = low,
                VeryLow = veryLow
            };
    }

    class BarValues
    {
        public List<StatisticsPie> TimeInRangeDetails { get; set; } = [];
        public List<StatisticsBar> TimeInRangeDetailsBar { get; set; } = [new()];
        public List<ChartPoint> GriResultValue { get; set; } = [];
        public List<GriRangeValue> GriRangeValues { get; set; } = [];
        public int Gri { get; set; }
        public string? ZoneText { get; set; }
        public double HypoPercent { get; set; }
        public double HyperPercent { get; set; }

        public double VeryHigh { get; set; }
        public double High { get; set; }
        public double InRange { get; set; }
        public double Low { get; set; }
        public double VeryLow { get; set; }

        public History ToHistory()
            => new()
                {
                    Gri = Gri,
                    VeryHigh = VeryHigh,
                    High = High,
                    InRange = InRange,
                    Low = Low,
                    VeryLow = VeryLow
                };
    }
}